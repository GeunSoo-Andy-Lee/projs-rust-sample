// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sample.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sample.test.Fruit)
pub struct Fruit {
    // message fields
    // @@protoc_insertion_point(field:sample.test.Fruit.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:sample.test.Fruit.weight)
    pub weight: f32,
    // @@protoc_insertion_point(field:sample.test.Fruit.shape)
    pub shape: ::protobuf::EnumOrUnknown<Shape>,
    // special fields
    // @@protoc_insertion_point(special_field:sample.test.Fruit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Fruit {
    fn default() -> &'a Fruit {
        <Fruit as ::protobuf::Message>::default_instance()
    }
}

impl Fruit {
    pub fn new() -> Fruit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Fruit| { &m.name },
            |m: &mut Fruit| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weight",
            |m: &Fruit| { &m.weight },
            |m: &mut Fruit| { &mut m.weight },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shape",
            |m: &Fruit| { &m.shape },
            |m: &mut Fruit| { &mut m.shape },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fruit>(
            "Fruit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Fruit {
    const NAME: &'static str = "Fruit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                21 => {
                    self.weight = is.read_float()?;
                },
                24 => {
                    self.shape = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.weight != 0. {
            my_size += 1 + 4;
        }
        if self.shape != ::protobuf::EnumOrUnknown::new(Shape::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(3, self.shape.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.weight != 0. {
            os.write_float(2, self.weight)?;
        }
        if self.shape != ::protobuf::EnumOrUnknown::new(Shape::UNKNOWN) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.shape))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Fruit {
        Fruit::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.weight = 0.;
        self.shape = ::protobuf::EnumOrUnknown::new(Shape::UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Fruit {
        static instance: Fruit = Fruit {
            name: ::std::string::String::new(),
            weight: 0.,
            shape: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Fruit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Fruit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Fruit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fruit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:sample.test.Shape)
pub enum Shape {
    // @@protoc_insertion_point(enum_value:sample.test.Shape.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:sample.test.Shape.CIRCLE)
    CIRCLE = 1,
    // @@protoc_insertion_point(enum_value:sample.test.Shape.SQUARE)
    SQUARE = 2,
}

impl ::protobuf::Enum for Shape {
    const NAME: &'static str = "Shape";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Shape> {
        match value {
            0 => ::std::option::Option::Some(Shape::UNKNOWN),
            1 => ::std::option::Option::Some(Shape::CIRCLE),
            2 => ::std::option::Option::Some(Shape::SQUARE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Shape] = &[
        Shape::UNKNOWN,
        Shape::CIRCLE,
        Shape::SQUARE,
    ];
}

impl ::protobuf::EnumFull for Shape {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Shape").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Shape {
    fn default() -> Self {
        Shape::UNKNOWN
    }
}

impl Shape {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Shape>("Shape")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0csample.proto\x12\x0bsample.test\"]\n\x05Fruit\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x16\n\x06weight\x18\x02\x20\x01(\x02R\
    \x06weight\x12(\n\x05shape\x18\x03\x20\x01(\x0e2\x12.sample.test.ShapeR\
    \x05shape*,\n\x05Shape\x12\x0b\n\x07UNKNOWN\x10\0\x12\n\n\x06CIRCLE\x10\
    \x01\x12\n\n\x06SQUARE\x10\x02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Fruit::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Shape::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
